-- FUNCTION: public.eb_objects_subsequentcommit_save2(text, text, text, integer, integer, json, text, boolean, integer, text, text, text[], boolean)

-- DROP FUNCTION public.eb_objects_subsequentcommit_save2(text, text, text, integer, integer, json, text, boolean, integer, text, text, text[], boolean);

CREATE OR REPLACE FUNCTION public.eb_objects_subsequentcommit_save2(
	idv text,
	obj_namev text,
	obj_descv text,
	obj_typev integer,
	obj_cur_statusv integer,
	obj_jsonv json,
	obj_changelogv text,
	issave boolean,
	commit_uidv integer,
	src_pid text,
	cur_pid text,
	relationsv text[],
	isversioned boolean)
    RETURNS text
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE 
    ROWS 0
AS $BODY$

DECLARE refidunique text; inserted_objid integer; inserted_obj_ver_id integer;objid integer;committed_refidunique text;

BEGIN

SELECT eb_objects_id FROM eb_objects_ver into objid WHERE refid=idv;
--for subsequent commit.not save
IF issave = FALSE THEN  

  	UPDATE eb_objects 
	SET 
    	obj_name = obj_namev, obj_desc = obj_descv, 
    	obj_last_ver_id = (SELECT MAX(ver_num)+1 FROM eb_objects_ver WHERE eb_objects_id = objid), 
    	obj_cur_status = obj_cur_statusv 
	WHERE 
    	id = objid RETURNING id INTO inserted_objid; 

	UPDATE eb_objects_ver
	SET
    	obj_json = obj_jsonv, obj_changelog = obj_changelogv, ver_num = (SELECT MAX(ver_num)+1 FROM eb_objects_ver WHERE eb_objects_id = objid), commit_uid= commit_uidv, commit_ts = NOW()
	WHERE
    	eb_objects_id= objid AND commit_uid IS NULL AND ver_num = -1 RETURNING id INTO inserted_obj_ver_id;
    
    refidunique := CONCAT_WS('-', src_pid, cur_pid, obj_typev, inserted_objid, inserted_obj_ver_id);  
     committed_refidunique:=refidunique;
	UPDATE eb_objects_ver SET refid = refidunique WHERE id = inserted_obj_ver_id;
    
	INSERT INTO eb_objects_ver
    	(eb_objects_id, ver_num, obj_json) 
	VALUES
    	(objid , -1, obj_jsonv) RETURNING id INTO inserted_obj_ver_id;
    
    refidunique := CONCAT_WS('-', src_pid, cur_pid, obj_typev, inserted_objid, inserted_obj_ver_id);  
	UPDATE eb_objects_ver SET refid = refidunique WHERE id = inserted_obj_ver_id;
	UPDATE eb_objects_relations 
      SET 
        eb_del = TRUE, removed_by= commit_uidv , removed_at=NOW()
      WHERE 
        dominant IN(
            SELECT unnest(ARRAY(select dominant from eb_objects_relations WHERE dependant = refidunique)) 
        EXCEPT 
            SELECT unnest(ARRAY[relationsv]));
            
            INSERT INTO eb_objects_relations 
        (dominant, dependant) 
    SELECT 
      dominantvals, refidunique 
      FROM UNNEST(array(SELECT unnest(ARRAY[relationsv])
        EXCEPT 
      SELECT unnest(array(select dominant from eb_objects_relations 
                            WHERE dependant = refidunique )))) as dominantvals;                            
    RETURN committed_refidunique; 
	
ELSE IF isversioned = FALSE THEN  
	UPDATE eb_objects SET obj_name = obj_namev, obj_desc = obj_descv WHERE id = objid RETURNING id INTO inserted_objid;
    UPDATE eb_objects_ver SET obj_json = obj_jsonv WHERE eb_objects_id = objid AND commit_uid IS NULL AND ver_num = 1 RETURNING refid INTO refidunique;
    committed_refidunique:=refidunique;
   UPDATE eb_objects_relations 
      SET 
        eb_del = TRUE, removed_by= commit_uidv , removed_at=NOW()
      WHERE 
        dominant IN(
            SELECT unnest(ARRAY(select dominant from eb_objects_relations WHERE dependant = refidunique)) 
        EXCEPT 
            SELECT unnest(ARRAY[relationsv]));
            
            INSERT INTO eb_objects_relations 
        (dominant, dependant) 
    SELECT 
      dominantvals, refidunique
      FROM UNNEST(array(SELECT unnest(ARRAY[relationsv])
        EXCEPT 
      SELECT unnest(array(select dominant from eb_objects_relations 
                            WHERE dependant = refidunique )))) as dominantvals;
	RETURN committed_refidunique;    
--For Save
ELSE
	UPDATE eb_objects SET obj_name = obj_namev, obj_desc = obj_descv WHERE id = objid RETURNING id INTO inserted_objid;
    UPDATE eb_objects_ver SET obj_json = obj_jsonv WHERE eb_objects_id = objid AND commit_uid IS NULL AND ver_num = -1;
    
    refidunique := CONCAT_WS('-', src_pid, cur_pid, obj_typev, inserted_objid, inserted_obj_ver_id);                                 
	UPDATE eb_objects_ver SET refid = refidunique WHERE id = inserted_obj_ver_id;
	UPDATE eb_objects_relations 
      SET 
        eb_del = TRUE, removed_by= commit_uidv , removed_at=NOW()
      WHERE 
        dominant IN(
            SELECT unnest(ARRAY(select dominant from eb_objects_relations WHERE dependant = refidunique)) 
        EXCEPT 
            SELECT unnest(ARRAY[relationsv]));
            
            INSERT INTO eb_objects_relations 
        (dominant, dependant) 
    SELECT 
      dominantvals, refidunique
      FROM UNNEST(array(SELECT unnest(ARRAY[relationsv])
        EXCEPT 
      SELECT unnest(array(select dominant from eb_objects_relations 
                            WHERE dependant = refidunique )))) as dominantvals;
    RETURN 0;
    END IF; 
END IF;  
END;

$BODY$;

ALTER FUNCTION public.eb_objects_subsequentcommit_save2(text, text, text, integer, integer, json, text, boolean, integer, text, text, text[], boolean)
    OWNER TO postgres;

