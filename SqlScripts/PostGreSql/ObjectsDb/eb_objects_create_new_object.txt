-- FUNCTION: public.eb_objects_create_new_object(text, text, integer, integer, json, integer, text, text, text[], boolean, text, integer)

-- DROP FUNCTION public.eb_objects_create_new_object(text, text, integer, integer, json, integer, text, text, text[], boolean, text, integer);

CREATE OR REPLACE FUNCTION public.eb_objects_create_new_object(
	obj_namev text,
	obj_descv text,
	obj_typev integer,
	obj_cur_statusv integer,
	obj_jsonv json,
	commit_uidv integer,
	src_pid text,
	cur_pid text,
	relationsv text[],
	issave boolean,
	tagsv text,
	app_id integer)
    RETURNS text
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE 
    ROWS 0
AS $BODY$

DECLARE refidunique text; inserted_objid integer; inserted_obj_ver_id integer; refid_of_commit_version text; version_number text;
BEGIN   
    INSERT INTO eb_objects 
        (obj_name, obj_desc, obj_type, obj_cur_status, obj_tags, applicationid, owner_uid, owner_ts)
    VALUES
        (obj_namev, obj_descv, obj_typev, obj_cur_statusv, tagsv, app_id, commit_uidv, NOW()) RETURNING id INTO inserted_objid;

    INSERT INTO eb_objects_ver
        (eb_objects_id, obj_json, commit_uid, commit_ts, major_ver_num, minor_ver_num, patch_ver_num, working_mode) 
    VALUES
        (inserted_objid, obj_jsonv, commit_uidv, NOW(),1,0,0,issave)RETURNING id INTO inserted_obj_ver_id;
		
    --majorversion.minorversion.patchversion
    IF issave = TRUE THEN
		version_number := CONCAT_WS('.',1,0,0,'w');
    ELSE
    	version_number := CONCAT_WS('.',1,0,0);
    END IF;
	
	--source_pid-current_pid-object_type-objectid-object_ver_id 
    refidunique := CONCAT_WS('-', src_pid, cur_pid, obj_typev, inserted_objid, inserted_obj_ver_id); 
	
    refid_of_commit_version:=refidunique;                       
	UPDATE eb_objects_ver SET refid = refidunique, version_num = version_number WHERE id = inserted_obj_ver_id;
    
	INSERT INTO eb_objects_status(eb_obj_ver_id, status, uid, ts, changelog) VALUES(inserted_obj_ver_id, 0, commit_uidv, NOW(), 'Created');
    
    INSERT INTO eb_objects_relations (dominant,dependant) VALUES (UNNEST(relationsv),refidunique);
		
	RETURN refid_of_commit_version;
END;

$BODY$;

ALTER FUNCTION public.eb_objects_create_new_object(text, text, integer, integer, json, integer, text, text, text[], boolean, text, integer)
    OWNER TO postgres;

