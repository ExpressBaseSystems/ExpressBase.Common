--DROP FUNCTION getalluserroles(text,text)

CREATE OR REPLACE FUNCTION getalluserroles(uname text,passwrd text )
RETURNS TABLE (role_id integer, role_name text) AS $$
BEGIN
	RETURN QUERY
SELECT 
    _roles.id,
    _roles.role_name 
FROM 
    eb_roles _roles
WHERE 
    id = ANY(
				(SELECT _r2user.role_id FROM eb_role2user _r2user WHERE _r2user.user_id = ANY (SELECT _usertbl.id FROM eb_users _usertbl WHERE _usertbl.email= uname AND _usertbl.pwd = passwrd))
                UNION ALL
				(WITH RECURSIVE role2role(role1_id, role2_id) AS 
				(
					(SELECT 
						a.role1_id, a.role2_id 
					FROM 
						eb_role2role a 
					WHERE 
						a.role1_id = ANY(SELECT _r2user1.role_id FROM eb_role2user _r2user1 WHERE _r2user1.user_id = ANY (SELECT _usertbl.id FROM eb_users _usertbl WHERE _usertbl.email= uname AND _usertbl.pwd = passwrd)))
					UNION ALL 
						SELECT b.role1_id, b.role2_id FROM eb_role2role b, role2role c  WHERE b.role1_id = c.role2_id)
					SELECT DISTINCT role2_id FROM role2role
				)
			);
END;
$$ LANGUAGE plpgsql;




-------------------------------------------------------------------------------------------------------------------------------------------


--DROP FUNCTION getalluserpermissions(text,text);

CREATE OR REPLACE FUNCTION getalluserpermissions( uname text,passwrd text)
RETURNS TABLE (pid integer,pname text, oid integer, opid integer ) AS $$
BEGIN
	RETURN QUERY 
SELECT 
	_per.id,
    _per.permissionname,
	_per.obj_id,
	_per.op_id 
FROM 
	eb_role2permission _per
WHERE role_id = ANY(SELECT 
    _roles.id    
FROM 
    eb_roles _roles
WHERE 
    id = ANY(
		       (SELECT _r2user.role_id FROM eb_role2user _r2user WHERE _r2user.user_id = ANY (SELECT _usertbl.id FROM eb_users _usertbl WHERE _usertbl.email= uname AND _usertbl.pwd = passwrd))
                UNION ALL
				(WITH RECURSIVE role2role(role1_id, role2_id) AS 
				(
					(SELECT 
						a.role1_id, a.role2_id 
					FROM 
						eb_role2role a 
					WHERE 
						a.role1_id = ANY(SELECT _r2user1.role_id FROM eb_role2user _r2user1 WHERE _r2user1.user_id = ANY (SELECT _usertbl.id FROM eb_users _usertbl WHERE _usertbl.email= uname AND _usertbl.pwd = passwrd)))
					UNION ALL 
						SELECT b.role1_id, b.role2_id FROM eb_role2role b, role2role c  WHERE b.role1_id = c.role2_id)
					SELECT DISTINCT role2_id FROM role2role
				)
			));
END;
$$ LANGUAGE plpgsql;